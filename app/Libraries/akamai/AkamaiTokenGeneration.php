<?php

namespace App\Libraries\akamai;

use Auth;
use Config;

    /**
        * class to generate the Token for Akamai Video Streaming
        *
            mandatory Fields for AkamaiToken to work
            1) ACL = /* or *
            2) Start time = unix time stamp
            3) Window = duration of which the token is valid
            4) Key = Auth Key generated by Akamai

            <URL>?hdnts=<token>
                   OR
            <URL>?hdnea=<token>

    */

class AkamaiTokenGeneration
{

    protected $algo = '';
    protected $ip = '';
    protected $start_time = 0;
    protected $window;
    protected $acl = '';
    protected $url = '';
    protected $session_id = '';
    protected $data = '';
    protected $salt = '';
    protected $key = '';
    protected $field_delimiter = '~';
    protected $early_url_encoding = false;
    protected $opts; // array;

    
    public function __CONSTRUCT($duration = 0)
    {
        $this->opts =  [
                //	'url='    	    =>  $_SERVER['REMOTE_ADDR'],
                    'start-time='   =>  "now",
                    'algo='         =>  'sha256',
                //  'ip='           =>  $_SERVER['REMOTE_ADDR'],
                    'window='       =>  $duration,
                   'key'            => Config::get('app.video_token_auth_key'),
                    'acl='          => '*',
                //   'uid='          =>  Auth::user()->uid,
                ];
    }


    protected function encode($val)
    {
        if ($this->early_url_encoding === true) {
            return rawurlencode($val);
        }
        return $val;
    }

    public function set_algo($algo)
    {
        if (in_array($algo, ['sha256','sha1','md5'])) {
            $this->algo = $algo;
        } else {
            throw new Exception("Invalid algorithm, must be one of 'sha256', 'sha1' or 'md5'");
        }
    }

    public function get_algo()
    {
        return $this->algo;
    }

    public function set_uid($v)
    {
        $this->uid = (int)$v;
    }

    public function get_uid()
    {
        return $this->uid;
    }

    public function set_ip($ip)
    {
        // @TODO: Validate IPV4 & IPV6 addrs
        $this->ip = $ip;
    }

    public function get_ip()
    {
        return $this->ip;
    }

    public function get_ip_field()
    {
        if ($this->ip != "") {
            return 'ip='.$this->ip.$this->field_delimiter;
        }
        return "";
    }

    public function set_start_time($start_time)
    {
        // verify starttime is sane
        if (strcasecmp($start_time, "now") == 0) {
            $this->start_time = time();
        } else {
            if (is_numeric($start_time) && $start_time > 0 && $start_time < 4294967295) {
                $this->start_time = 0+$start_time; // faster then intval
            } else {
                throw new Exception("start time input invalid or out of range");
            }
        }
    }

    public function get_start_time()
    {
        return $this->start_time;
    }

    protected function get_start_time_value()
    {
        if ($this->start_time > 0) {
            return $this->start_time;
        } else {
            return time();
        }
    }

    public function get_start_time_field()
    {
        if (is_numeric($this->start_time) && $this->start_time > 0 && $this->start_time < 4294967295) {
            return "st=".$this->get_start_time_value().$this->field_delimiter;
        } else {
            return '';
        }
    }

    public function set_window($window)
    {
        // verify window is sane
        if (is_numeric($window) && $window > 0) {
            $this->window = 0+$window; // faster then intval
        } else {
            $this->throwError("window input invalid");
        }
    }

    public function get_window()
    {
        return $this->window;
    }

    public function get_expr_field()
    {
        return "exp=".($this->get_start_time_value()+$this->get_window()).$this->field_delimiter;
    }

    public function set_acl($acl)
    {
        if ($this->url != "") {
            $this->throwError("Cannot set both an ACL and a URL at the same time");
        }
        $this->acl = $acl;
    }

    public function get_acl()
    {
        return $this->acl;
    }

    public function get_acl_field()
    {
        if ($this->acl) {
            return 'acl='.$this->encode($this->acl).$this->field_delimiter;
        } elseif (! $this->url) {
            //return a default open acl     $token = $g->generate_token($this);
            return 'acl='.$this->encode('*').$this->field_delimiter;
            //return 'acl='.$this->encode('/*').$this->field_delimiter;
        }
        return '';
    }

    public function set_url($url)
    {
        if ($this->acl) {
            $this->throwError("Cannot set both an ACL and a URL at the same time");
        }
        $this->url = $url;
    }
    public function get_url()
    {
        return $this->url;
    }
    public function get_url_field()
    {
        if ($this->url && ! $this->acl) {
            return 'url='.$this->encode($this->url).$this->field_delimiter;
        }
        return '';
    }

    public function set_session_id($session_id)
    {
        $this->session_id = $session_id;
    }

    public function get_session_id()
    {
        return $this->session_id;
    }

    public function get_session_id_field()
    {
        if ($this->session_id) {
            return 'id='.$this->session_id.$this->field_delimiter;
        }
        return "";
    }

    public function set_data($data)
    {
        $this->data = $data;
    }

    public function get_data()
    {
        return $this->data;
    }

    public function get_data_field()
    {
        if ($this->data) {
            return 'data='.$this->data.$this->field_delimiter;
        }
        return "";
    }

    public function set_salt($salt)
    {
        $this->salt = $salt;
    }

    public function get_salt()
    {
        return $this->salt;
    }

    public function get_salt_field()
    {
        if ($this->salt) {
            return 'salt='.$this->salt.$this->field_delimiter;
        }
        return "";
    }

    public function set_key($key)
    {
        //verify the key is valid hex
        if (preg_match('/^[a-fA-F0-9]+$/', $key) && (strlen($key)%2) == 0) {
            $this->key = $key;
        } else {
            $this->throwError("Key must be a hex string (a-f,0-9 and even number of chars)");
        }
    }
    public function get_key()
    {
        return $this->key;
    }

    public function set_field_delimiter($field_delimiter)
    {
        $this->field_delimiter = $field_delimiter;
    }

    public function get_field_delimiter()
    {
        return $this->field_delimiter;
    }

    /*
	public function set_early_url_encoding($early_url_encoding) {
		$this->early_url_encoding = $early_url_encoding;
	}

	public function get_early_url_encoding() {
		return $this->early_url_encoding;
	}
	*/

    
    protected function h2b($str)
    {
        $bin = "";
        $i = 0;
        do {
            $bin .= chr(hexdec($str{$i}.$str{($i + 1)}));
            $i += 2;
        } while ($i < strlen($str));
        return $bin;
    }

    private function throwError($message = '')
    {
        echo 'Error: '.$message;
    }

    // Mandatory is time
    // ACL is mandatory and IP, data and session is optional
    // ACL ="/*"

    public function generate_token()
    {
        // ASSUMES:($algo='sha256', $ip='', $start_time=null, $window=300, $acl=null, $acl_url="", $session_id="", $payload="", $salt="", $key="000000000000", $field_delimiter="~")
        try {
            $m_token = $this->get_ip_field();
            $m_token .= $this->get_start_time_field();
            $m_token .= $this->get_expr_field();
            $m_token .= $this->get_acl_field();
        
        /*
		$m_token .= $this->get_session_id_field();
		$m_token .= $this->get_data_field();
		*/

            $m_token_digest = (string)$m_token;
            $m_token_digest .= $this->get_url_field();
            $m_token_digest .= $this->get_salt_field();
        
        // produce the signature and append to the tokenized string
            $signature = hash_hmac($this->get_algo(), rtrim($m_token_digest, $this->get_field_delimiter()), $this->h2b($this->get_key()));
            return $m_token.'hmac='.$signature;
        } catch (Exception $e) {
            $this->throwError($e->getMessage());
        }
    }


    public function getToken()
    {

        if (is_array($this->opts) && !empty($this->opts)) {
            foreach ($this->opts as $o => $v) {
                if (($o == 'window=') || ($o == 'w')) {
                    $this->set_window($v);
                } elseif (($o == 'start-time=') || ($o == 's')) {
                    $this->set_start_time($v);
                } elseif (($o == 'ip=') || ($o == 'i')) {
                    $this->set_ip($v);
                } elseif (($o == 'acl=') || ($o == 'a')) {
                    $this->set_acl($v);
                } elseif (($o == 'session-id=') || ($o == 'I')) {
                    $this->set_session_id($v);
                } /*elseif (($o == 'payload=') || ($o == 'p')) {
				$this->set_data($v);
			}*/ elseif (($o == 'url=') || ($o == 'u')) {
                    $this->set_url($v);
} elseif (($o == 'salt=') || ($o == 'S')) {
    $this->set_salt($v);
} elseif (($o == 'field-delimiter=') || ($o == 'd')) {
    $this->set_field_delimiter($v);
} elseif (($o == 'algo=') || ($o == 'A')) {
    $this->set_algo($v);
} elseif (($o == 'key') || ($o == 'k')) {
    $this->set_key($v);
}
            /*elseif(($o == 'uid=') || ($o == 'U')){
				$this->set_uid($v);
			}*/
            }
        
            return  $this->generate_token();
        }
    }
}
